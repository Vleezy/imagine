# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type RankModel {
  id: ID!
  name: String
  description: String
  badgeCode: String
  users: [UserModel!]
}

type SessionModel {
  id: ID!
  userID: Float
  createdAt: String
  updatedAt: String
}

type SessionCreatedModel {
  id: ID!
  userID: Float
  accessToken: String
}

type UserModel {
  id: ID!
  username: String
  email: String
  gameSSO: String
  rankID: ID
  rank: RankModel
  rankVipID: ID
  rankVip: RankModel
  credits: Float
  vipPoints: Float
  activityPoints: Float
  look: String
  gender: UserGender
  motto: String
  accountCreatedAt: String
  lastOnline: String
  onlineStatus: UserOnlineStatus
  ipRegisteredWith: String
  homeRoomID: Float
  muteStatus: UserMuteStatus
  allowingNewFriends: UserAllowingNewFriendsStatus
  showOnlineStatus: UserShowOnlineStatus
  vipStatus: UserVipStatus
  sessions: [SessionModel!]
}

enum UserGender {
  Male
  Female
}

enum UserOnlineStatus {
  Online
  Offline
}

enum UserMuteStatus {
  IsMuted
  NotMuted
}

enum UserAllowingNewFriendsStatus {
  Yes
  No
}

enum UserShowOnlineStatus {
  Hidden
  Visible
}

enum UserVipStatus {
  Yes
  No
}

type BadgeModel {
  id: ID!
  code: String
}

type ConfigModel {
  siteName: String
  logoURL: String
  nitroURL: String
  discordURL: String
  facebookURL: String
  twitterURL: String
}

type ArticleCommentModel {
  id: ID!
  articleID: Float
  article: ArticleModel
  userID: Float
  user: UserModel
  comment: String
  createdAt: String
  updatedAt: String
}

type ArticleModel {
  id: ID!
  name: String
  description: String
  content: String
  imageURL: String
  userID: Float
  user: UserModel
  comments: [ArticleCommentModel!]
}

type Query {
  badge(id: Float!): BadgeModel!
  badges(other: ExtraArgs): [BadgeModel!]!
  sessionCurrent: SessionModel!
  session(id: Float!): SessionModel!
  sessions(other: ExtraArgs): [SessionModel!]!
  user(id: Float!): UserModel!
  users(other: ExtraArgs, username: String): [UserModel!]!
  rank(id: Float!): RankModel!
  ranks(other: ExtraArgs): [RankModel!]!
  article(id: Float!): ArticleModel!
  articles(other: ExtraArgs): [ArticleModel!]!
  articleComment(id: Float!): ArticleCommentModel!
  articleComments(other: ExtraArgs): [ArticleCommentModel!]!
  config: ConfigModel!
}

input ExtraArgs {
  skip: Float
  take: Float
  order: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  badgeCreate(newBadge: BadgeInput!): BadgeModel!
  badgeUpdate(id: Float!, badgeChanges: BadgeInput!): Boolean!
  badgeDelete(id: Float!): Boolean!
  sessionCreate(sessionCreateInput: SessionCreateInput!): SessionCreatedModel!
  userCreate(newUser: UserCreateInput!): UserModel!
  userUpdate(id: Float!, userChanges: UserUpdateInput!): Boolean!
  userDelete(id: Float!): Boolean!
  rankCreate(newRank: RankCreateInput!): RankModel!
  rankUpdate(id: Float!, rankChanges: RankUpdateInput!): Boolean!
  rankDelete(id: Float!): Boolean!
  articleCreate(newArticle: ArticleCreateInput!): ArticleModel!
  articleUpdate(id: Float!, articleChanges: ArticleUpdateInput!): Boolean!
  articleDelete(id: Float!): Boolean!
  articleCommentCreate(newArticleComment: ArticleCommentCreateInput!): ArticleCommentModel!
  articleCommentUpdate(id: Float!, articleChanges: ArticleCommentUpdateInput!): Boolean!
  articleCommentDelete(id: Float!): Boolean!
  configUpdate(configUpdateInput: ConfigUpdateInput!): Boolean!
}

input BadgeInput {
  code: String!
}

input SessionCreateInput {
  username: String!
  password: String!
}

input UserCreateInput {
  username: String!
  password: String!
  email: String!
}

input UserUpdateInput {
  password: String
  email: String
}

input RankCreateInput {
  name: String!
  description: String!
  badgeCode: String!
}

input RankUpdateInput {
  name: String!
  description: String!
  badgeCode: String!
}

input ArticleCreateInput {
  name: String!
  description: String!
  content: String!
  imageURL: String!
}

input ArticleUpdateInput {
  name: String!
  description: String!
  content: String!
  imageURL: String!
}

input ArticleCommentCreateInput {
  articleID: Float!
  comment: String!
}

input ArticleCommentUpdateInput {
  comment: String!
}

input ConfigUpdateInput {
  siteName: String!
  logoURL: String!
  nitroURL: String!
  discordURL: String!
  facebookURL: String!
  twitterURL: String!
}

type Subscription {
  badgeCreated: BadgeModel!
  badgeDeleted: BadgeModel!
  sessionCreated: SessionModel!
  userCreated: UserModel!
  userDeleted: UserModel!
  rankCreated: RankModel!
  rankDeleted: RankModel!
  articleCreated: ArticleModel!
  articleDeleted: ArticleModel!
  articleCommentCreated: ArticleCommentModel!
  articleCommentDeleted: ArticleCommentModel!
  configUpdated: ConfigModel!
}